pipeline {
    agent {
        docker {
            image 'node:14.17.0'
        }
    }

    environment {
        ENVIRONMENT = 'uat'
        BRANCH_UAT = 'main'
        S3_CREDENTIAL = 'S3'
        S3_REGION = 'ap-southeast-2'
        BUCKET_NAME = 's3://www.uat.goexperts.net'
        GCS_BUCKET_NAME = 'gs://gcp.uat.goexperts.net'
        GCS_CREDENTIAL = 'goexpert-gcs'
        WORKSPACE_PATH = '/var/jenkins_home/workspace/devops-frontend/build' 
    }

    options {
        // Keep maximum 10 archieved artifacts
        buildDiscarder(logRotator(numToKeepStr:'10', artifactNumToKeepStr:'10'))
        // No simultaneous builds
        disableConcurrentBuilds()
        durabilityHint('PERFORMANCE_OPTIMIZED') //MAX_SURVIVABILITY or SURVIVABLE_NONATOMIC
    }

    stages {
        stage('Install packages') {
            steps {
                echo "Installing packages ..."
                //Install the packages from package.json
                sh 'npm install'
            }
        }
        stage('Build') {
            steps {
                echo "Building ..."
                echo "Running job: ${env.JOB_NAME}\n Build: ${env.BUILD_ID} - ${env.BUILD_URL}\nPepeline: ${env.RUN_DISPLAY_URL}"
                sh 'npm run build'
            }
        }

        stage('Install AWS CLI') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                echo "Installing AWS CLI ..."
                sh 'apt-get update'
                sh 'apt install python3-pip -y'
                sh 'pip3 install awscli --upgrade'
            }
        }
        stage('Install GCP SDK') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                echo "Installing GCP SDK ..."
                sh 'echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list'
                sh 'curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -'
                sh 'apt-get update && apt-get -y install google-cloud-sdk'
            }
        }
        stage('Deploy to UAT') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                deployToS3(ENVIRONMENT)
                deployToGCS(ENVIRONMENT) 

            }
        }
    }

    post {
        success {
            echo "WELL DONE!!"
            bitbucketStatusNotify(buildState: 'SUCCESSFUL')
        }
        failure {
            echo "FAILED"
            bitbucketStatusNotify(buildState: 'FAILED')
        }
    }
}

 def deployToS3(environment) {
    echo 'Deploying to ' + environment + ' ...'
    withAWS(credentials: S3_CREDENTIAL, region: S3_REGION) {
        // Empty the UAT bucket
        sh 'aws s3 rm "${BUCKET_NAME}" --recursive' // ${BUCKET_NAME} is also fine
        // Copy the static files from workspace to the S3 bucket
        sh 'aws s3 cp "${WORKSPACE_PATH}" "${BUCKET_NAME}" --recursive --acl public-read'
    }
}

def deployToGCS(environment) {
    echo 'Deploying to ' + environment + ' ...'
    withCredentials([file(credentialsId:GCS_CREDENTIAL, variable: 'GC_KEY')]) {
        sh 'gcloud auth activate-service-account --key-file $GC_KEY'
        // Empty the DEV bucket
        sh '''
            if [  "\$(gsutil ls ${GCS_BUCKET_NAME})" ]; then
                gsutil rm -r "${GCS_BUCKET_NAME}"/*
            fi
        '''
        // Copy the static file from workspace to the GCS bucket
        sh 'gsutil cp -r "${WORKSPACE_PATH}"/* "${GCS_BUCKET_NAME}"/'
    }

}

