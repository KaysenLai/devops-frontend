pipeline {
    agent any

    environment {
        ENVIRONMENT = 'production'
        BRANCH_UAT = 'main'
        CLOUDFRONT_DISTRIBUTION_ID = 'E32EHF854UJCK1'
        AWS_CREDENTIAL = 'e2832236-c4ba-4733-95cf-d2808cdbb184'
        S3_REGION = 'ap-southeast-2'
        BUCKET_NAME = 's3://frontend.chaokai.me'
        WORKSPACE_PATH = '/var/lib/jenkins/workspace/devops-frontend/build'
    }

    options {
        // Keep maximum 10 archieved artifacts
        buildDiscarder(logRotator(numToKeepStr:'10', artifactNumToKeepStr:'10'))
        // No simultaneous builds
        disableConcurrentBuilds()
        durabilityHint('PERFORMANCE_OPTIMIZED') //MAX_SURVIVABILITY or SURVIVABLE_NONATOMIC
    }

    stages {
        stage('Git checkout') {
            steps{
                // Get source code from a GitHub repository
                git branch:'main', url:'https://github.com/KaysenLai/devops-frontend'
            }
        }
        stage('Install packages') {
            steps {
                echo "Installing packages ..."
                sh "node -v"
                //Install the packages from package.json
                sh 'npm install'
            }
        }
        stage('Build') {
            steps {
                echo "Building ..."
                echo "Running job: ${env.JOB_NAME}\n Build: ${env.BUILD_ID} - ${env.BUILD_URL}\nPepeline: ${env.RUN_DISPLAY_URL}"
                sh 'npm run build'
            }
        }

        stage('Deploy to s3') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                echo 'Deploying to ' + environment + ' ...'
                withAWS(credentials: AWS_CREDENTIAL, region: S3_REGION) {
                    // Empty the UAT bucket
                    sh 'aws s3 rm "${BUCKET_NAME}" --recursive'
                    // Copy the static files from workspace to the S3 bucket
                    sh 'aws s3 cp "${WORKSPACE_PATH}" "${BUCKET_NAME}" --recursive --acl public-read'
                    sh 'aws cloudfront create-invalidation --distribution-id "${CLOUDFRONT_DISTRIBUTION_ID}" --paths "/"'
                }
            }
        }
    }

    post {
        success {
            echo "WELL DONE!!"
        }
        failure {
            echo "FAILED"
        }
    }
}

